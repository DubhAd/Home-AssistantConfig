mode: 'restart'
description: 'Manages the right kind of BT scan. Departure scan if everybody is home, or there was motion in the vestibule. Arrival scan if nobody is home or there was no motion in the vestibule or hall. Arrival then departure if we are unsure'
sequence:
- service: notify.send_message
  target: 
    entity_id: notify.debug_log
  data:
    message: >-
      Scan started. Garage: car {{ states('binary_sensor.garage_door_car_contact') }}, bike {{ states('binary_sensor.garage_door_bike_contact') }}.  Vestibule {{ states('binary_sensor.vestibule_multi_occupancy') }} for {{ (now()-states.binary_sensor.vestibule_multi_occupancy.last_changed).seconds }} seconds.  Front door {{ states('binary_sensor.front_door_contact') }} for {{ (now()-states.binary_sensor.front_door_contact.last_changed).seconds }} seconds. 
- choose:
  #################### ####################
  # If we've just marked somebody as Just Arrived then don't run a departure scan if the garage door is still open.
  # 
  # This is to catch the situation when we come home, open the front door to put in shopping, then
  # close the door while we put the car away.
  #################### ####################
  # Everybody away
  - alias: "Everybody is away"
    conditions:
    # Everybody is away - this can only be an arrival
    - condition: numeric_state
      entity_id: sensor.home_count
      below: 0.1
    sequence:
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Arrival scan because nobody is home"
    - service: script.turn_on
      entity_id: script.scan_bt_arrive
  #################### ####################
  # Far garage door open, near one closed, motion in the vestibule
  - alias: "bike door open, do nothing"
    conditions:
    # If the far garage door is open, and the near one is closed, we're likely going to the bike
    - condition: state
      entity_id: binary_sensor.garage_door_bike_contact
      state: 'on'
    - condition: state
      entity_id: binary_sensor.garage_door_car_contact
      state: 'off'
    # Something happen in the vestibule recently
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.vestibule_multi_occupancy
        state: 'on'
        for: '00:00:01'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.vestibule_multi_occupancy
          state: 'off'
          for: '00:02:00'
    sequence:
    # Check for departure, then check for arrival (just in case)
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Do nothing because of motion in the vestibule, and the bike door is open"
  #################### ####################
  # No motion inside
  - alias: "No motion in the vestibule"
    conditions:
    # Nothing happened recently inside 
    - condition: or
      conditions:
      - alias: "Somebody on the path"
        condition: state
        entity_id: binary_sensor.front_path_person_occupancy
        state: 'on'
      - condition: state
        entity_id: binary_sensor.vestibule_multi_occupancy
        state: 'off'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.vestibule_multi_occupancy
          state: 'on'
          for: '00:00:01'
    sequence:
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Arrival scan because somebody is in the path or there was no motion in the vestibule ({{ (now()-states.binary_sensor.vestibule_multi_occupancy.last_changed).seconds }} ago)"
    - service: script.turn_on
      entity_id: script.scan_bt_arrive
  #################### ####################
  - alias: "Somebody just arrived"
    conditions:
    # Somebody just arrived
    - condition: or
      conditions:
      - condition: state
        entity_id: input_select.person3_status_dropdown
        state: 'Just Arrived'
      - condition: state
        entity_id: input_select.person1_status_dropdown
        state: 'Just Arrived'
      - condition: state
        entity_id: input_select.person2_status_dropdown
        state: 'Just Arrived'
    sequence:
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Arrival scan because somebody just arrived home"
    - service: script.turn_on
      entity_id: script.scan_bt_arrive
  #################### ####################
  # Early hours of the morning
  - alias: "Early morning"
    conditions:
    - condition: time
      after: '23:00:00'
      before: '04:00:00'
    # Something happen in the vestibule recently
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.vestibule_multi_occupancy
        state: 'on'
        for: '00:00:07'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.vestibule_multi_occupancy
          state: 'off'
          for: '00:02:00'
    sequence:
    - wait_template: "{{ is_state('binary_sensor.garage_door_bike_contact','on') }}"
      timeout: '00:01:00'
      continue_on_timeout: true
    - condition: state
      entity_id: binary_sensor.garage_door_bike_contact
      state: 'off'
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Departure scan because of motion in the vestibule ({{ (now()-states.binary_sensor.vestibule_multi_occupancy.last_changed).seconds }} ago) and the bike door is closed"
    - service: script.turn_on
      entity_id: script.scan_bt_depart
  #################### ####################
  - alias: "Motion in the vestibule"
    conditions:
    # Something happen in the vestibule recently
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.vestibule_multi_occupancy
        state: 'on'
        for: '00:00:02'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.vestibule_multi_occupancy
          state: 'off'
          for: '00:02:00'
    sequence:
    # Check for departure, then check for arrival (just in case)
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Departure (no arrival) scan because of motion in the vestibule ({{ (now()-states.binary_sensor.vestibule_multi_occupancy.last_changed).seconds }} ago)"
    - service: script.turn_on
      entity_id: script.scan_bt_depart
    #- delay: '00:00:30'
    #- service: script.turn_on
    #  entity_id: script.scan_bt_arrive
  #################### ####################
  # Car door is open
  - alias: "Garage door is open"
    conditions:
    # Garage door is open already, or recently closed
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.garage_door_car_contact
        state: 'on'
        for: '00:00:01'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.garage_door_car_contact
          state: 'off'
          for: '00:00:30'
    sequence:
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Arrival scan because the garage door is open ({{ (now()-states.binary_sensor.garage_door_car_contact.last_changed).seconds }} ago)"
    - service: script.turn_on
      entity_id: script.scan_bt_arrive
  #################### ####################
  # Everybody is home
  - alias: "Everybody is home"
    conditions:
    # Nobody is away - this can only be a departure
    - condition: numeric_state
      entity_id: sensor.home_count
      above: 0.9
    sequence:
    - service: notify.send_message
      target: 
        entity_id: notify.debug_log
      data:
        message: "Departure scan because everybody is home"
    - service: script.turn_on
      entity_id: script.scan_bt_depart
  #################### ####################
  # Mixed bag situation unclear, do it all
  default:
  - service: notify.send_message
    target: 
      entity_id: notify.debug_log
    data:
      message: "Departure then arrival scan because we have no idea"
  - service: script.turn_on
    entity_id: script.scan_bt_arrive
  - delay: '00:00:30'
  - service: script.turn_on
    entity_id: script.scan_bt_depart
