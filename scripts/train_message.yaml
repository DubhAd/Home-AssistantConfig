alias: Train message
sequence:
  - variables:
      train_selector: >-
        {% if states('sensor.work_person2_distance')|int(0) < 5 %}
          sensor.next_train_to_abc
        {% elif states('sensor.home_person2_distance')|int(0) < 2000 %}
          sensor.next_train_to_xyz
        {% else %}
          sensor.next_train_to_xyz
        {% endif %}
  - service: homeassistant.update_entity
    data:
      entity_id: "{{ train_selector }}"
  - wait_template: >-
      {{ (as_timestamp(now()) - as_timestamp(states[train_selector].last_updated))|int < 90 }}
  - service: input_text.set_value
    data:
      entity_id: input_text.train_message
      value: >-
        {%- macro getTrainStatus() -%}
        {%- for train in state_attr(train_selector, 'next_trains') -%}
        {%- if ( train.status == "ON TIME" or train.status == "EARLY" ) -%} X {%- endif -%}
        {%- endfor -%}
        {%- endmacro -%}
        {{ getTrainStatus()|length }} of {{ state_attr(train_selector, 'next_trains')|length }} trains to {{ state_attr(train_selector,'calling_at') }} are on time. {% if (getTrainStatus()|length) != (state_attr(train_selector,'next_trains')|length) %}{%- for train in state_attr(train_selector, 'next_trains') %}The {{ train.scheduled }} is {{ train.status }}{% if train.status == "LATE" %} at {{ train.estimated }}{% endif %}. {% endfor -%}{%- endif -%}
